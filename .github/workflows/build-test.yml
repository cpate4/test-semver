# This workflow validates, deploys, and runs the specified bundle
# within a pre-production target named "cicd".
# https://learn.microsoft.com/en-us/azure/databricks/dev-tools/bundles/ci-cd-bundles
#
name: build-test

# Ensure that only a single job or workflow using the same concurrency group
# runs at a time.
concurrency: 1

# Trigger this workflow whenever a pull request is opened against the repo's
# main branch or an existing pull request's head branch is updated.
on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

permissions:
  contents: write
  actions: write
  checks: write
  id-token: write

jobs:

  # locate databricks asset bundle (dab) root directories.
  # this is determined based on the presence of a `databricks.yml` file.
  #
  find-bundles:
    runs-on: ubuntu-latest
    outputs:
      root-dirs: ${{ steps.find-bundles.outputs.root_dirs }}
    steps:
        - uses: actions/checkout@v4

        - name: List all changed files
          id: changed-files
          # https://semgrep.dev/blog/2025/popular-github-action-tj-actionschanged-files-is-compromised/
          uses: tj-actions/changed-files@2f7c5bf
          # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
          # with:
          #   since_last_remote_commit: true

        - name: Identify databricks asset bundle root directories
          id: find-bundles
          env:
            ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          run: |
            ROOT_DIRS=$(./scripts/find_bundles.sh "${ALL_CHANGED_FILES}")
            echo "root_dirs=$ROOT_DIRS" >> $GITHUB_OUTPUT


  build-test:
      runs-on: ubuntu-latest
      needs:
        find-bundles
      strategy:
          fail-fast: false
          matrix:
            root-dir: ${{ fromJson(needs.find-bundles.outputs.root-dirs) }}
      steps:
        - uses: actions/checkout@v4
          with:
            token: ${{ secrets.GITHUB_TOKEN }} # this allows the push to succeed later      

        # Download the Databricks CLI.
        # See https://github.com/databricks/setup-cli
        - uses: databricks/setup-cli@main

        # https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#caching-packages
        # https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#cache-hit
        - run: pipx install poetry
        - uses: actions/setup-python@v5
          with:
            # https://learn.microsoft.com/en-us/azure/databricks/release-notes/runtime/15.4lts#system-environment
            python-version: 3.11
            cache: poetry
            # cache-dependency-path: poetry.lock

        # Deploy the bundle to the "cicd" target as defined
        # in the bundle's settings file.
        - run: ./scripts/build-and-test.sh ${DATABRICKS_BUNDLE}
          env:
            DATABRICKS_BUNDLE_DIR: ${{ matrix.root-dir }}
            DATABRICKS_BUNDLE_ENV: cicd
            # https://learn.microsoft.com/en-us/azure/databricks/dev-tools/auth/oauth-m2m#environment
            DATABRICKS_HOST: https://adb-110501499366923.3.azuredatabricks.net
            # service principal: github
            DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
            DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}

  dispatch-tag:
    needs: [build-test]
    # only dispatch a new tag and trigger downstream image build on push to main
    if: success() && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/tag.yml
    secrets: inherit
